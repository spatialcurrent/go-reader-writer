version: "2.1"

executors:
  # `main` uses the `cimg/go:1.15` docker image.
  main:
    docker:
      - image: cimg/go:1.15

  # `base` uses the `cimg/base` docker image.
  base:
    docker:
      - image: cimg/base:2020.07

  # `android` uses the `cimg/base` docker image.
  android:
    docker:
      - image: circleci/android:api-29-ndk

  # `macos` uses the macOS machine image.
  macos:
    macos:
      xcode: 11.5.0
      resource_class: medium

  # `windows` uses the Windows machine image.
  windows:
    machine:
      image: "windows-server-2019-vs2019:stable"
      resource_class: "windows.medium"
      shell: "powershell.exe -ExecutionPolicy Bypass"


jobs:

  # `test_go` tests the GRW source code.
  test_go:
    executor: main
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: make fmt
      - run: make imports
      - run: make test_go
      - run: git diff --exit-code

  # `test_cli` tests the GRW executable.
  test_cli:
    executor: main
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: make tidy
      - run: make bin/grw
      - run: make test_cli

  # `build` builds the GRW executables and libraries.
  build:
    executor: main
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: make tidy
      - run: make build_release
      - run: rm -f bin/gox
      - run: sudo make deps_arm
      - run: make build_so
      - store_artifacts:
          path: bin
          destination: /
      - persist_to_workspace:
          root: bin
          paths:
            - grw_darwin_amd64
            - grw_linux_386
            - grw_linux_amd64
            - grw_linux_arm
            - grw_linux_arm64
            - grw_windows_386.exe
            - grw_windows_amd64.exe

  # `build_android` builds the GRW Android Archive (AAR)
  build_android:
    executor: android
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Install go
          command: |
            curl -fsSL "https://golang.org/dl/go1.15.5.linux-amd64.tar.gz" | sudo tar --no-same-owner --strip-components=1 --gunzip -x -C /usr/local/go/
            echo "export PATH=$PATH:/usr/local/go/bin" >> $BASH_ENV
            chown -R $(whoami): /usr/local/go
      - run: make tidy
      - run: make build_android
      - run: rm -f bin/gomobile
      - store_artifacts:
          path: bin
          destination: /
      - persist_to_workspace:
          root: bin
          paths:
            - grw.aar

  # `examples` runs the GRW examples.
  examples:
    executor: base
    steps:
      - run: sudo chown -R circleci /go/src
      - run: make run_example_c
      - run: make run_example_cpp
      - run: make run_example_python

  # `verify_linux` verifys the linux build
  verify_linux:
    executor: base
    steps:
      - attach_workspace:
          at: bin
      - run: bin/grw_linux_386 --help
      - run: bin/grw_linux_amd64 --help

  # `verify_macos` verifys the macOS build
  verify_macos:
    executor: macos
    steps:
      - attach_workspace:
          at: bin
      - run: bin/grw_darwin_amd64 --help

  # `verify_windows` verifys the windows build
  verify_windows:
    executor: windows
    steps:
      - attach_workspace:
          at: bin
      - run: bin/grw_windows_386.exe --help
      - run: bin/grw_windows_amd64.exe --help

workflows:
  version: 2
  main:
    jobs:
      - test_go
      - test_cli
      - build
      - build_android
      - verify_linux:
          requires:
            - build
      - verify_macos:
          requires:
            - build
      - verify_windows:
          requires:
            - build
